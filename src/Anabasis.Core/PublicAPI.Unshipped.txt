#nullable enable
abstract Anabasis.Core.AnabasisGame.Load() -> Anabasis.Tasks.AnabasisTask
abstract Anabasis.Core.AnabasisGame.Render() -> void
abstract Anabasis.Core.AnabasisGame.Update() -> void
abstract Anabasis.Core.Shader.ProgramUniform<T>.SetValue(uint programHandle, int location, in T value) -> void
Anabasis.Core.AnabasisBindableNativeObject<THandle>
Anabasis.Core.AnabasisBindableNativeObject<THandle>.AnabasisBindableNativeObject(Silk.NET.OpenGL.GL! gl, THandle name) -> void
Anabasis.Core.AnabasisBindableNativeObject<THandle>.Use() -> System.IDisposable!
Anabasis.Core.AnabasisGame
Anabasis.Core.AnabasisGame.AnabasisGame() -> void
Anabasis.Core.AnabasisGame.LoadTask.get -> System.Threading.Tasks.Task!
Anabasis.Core.AnabasisGraphicsDevice
Anabasis.Core.AnabasisGraphicsDevice.AnabasisGraphicsDevice() -> void
Anabasis.Core.AnabasisGraphicsDevice.Dispose() -> void
Anabasis.Core.AnabasisGraphicsDevice.GL.get -> Silk.NET.OpenGL.GL!
Anabasis.Core.AnabasisGraphicsDevice.Viewport.get -> Silk.NET.Maths.Vector2D<int>
Anabasis.Core.AnabasisGraphicsDevice.Viewport.set -> void
Anabasis.Core.AnabasisNativeObject<THandle>
Anabasis.Core.AnabasisNativeObject<THandle>.AnabasisNativeObject(Silk.NET.OpenGL.GL! gl, THandle name) -> void
Anabasis.Core.AnabasisNativeObject<THandle>.Dispose() -> void
Anabasis.Core.AnabasisNativeObject<THandle>.Gl.get -> Silk.NET.OpenGL.GL!
Anabasis.Core.AnabasisNativeObject<THandle>.Handle.get -> THandle
Anabasis.Core.AnabasisNativeObject<THandle>.Label.get -> string!
Anabasis.Core.AnabasisNativeObject<THandle>.Label.set -> void
Anabasis.Core.AnabasisRunLoop
Anabasis.Core.AnabasisRunLoop.AnabasisRunLoop() -> void
Anabasis.Core.AnabasisRunLoop.PlatformLoopHandlerDisposer
Anabasis.Core.AnabasisRunLoop.PlatformLoopHandlerDisposer.Dispose() -> void
Anabasis.Core.AnabasisRunLoop.PlatformLoopHandlerDisposer.PlatformLoopHandlerDisposer() -> void
Anabasis.Core.AnabasisRunLoop.RegisterHandler(Anabasis.Tasks.AnabasisPlatformLoopStep step, int priority, string! name, System.Action! handler) -> Anabasis.Core.AnabasisRunLoop.PlatformLoopHandlerDisposer
Anabasis.Core.AnabasisRunLoop.RemoveHandler(Anabasis.Tasks.AnabasisPlatformLoopStep step, string! name) -> void
Anabasis.Core.AnabasisWindow
Anabasis.Core.AnabasisWindow.AnabasisWindow(Silk.NET.Windowing.IWindow! window, Microsoft.Extensions.Hosting.IHostApplicationLifetime! applicationLifetime) -> void
Anabasis.Core.AnabasisWindow.Close() -> void
Anabasis.Core.AnabasisWindow.Run(Anabasis.Core.AnabasisRunLoop! runLoop, Anabasis.Core.AnabasisGraphicsDevice! graphicsDevice, System.Action! unloadCallback) -> void
Anabasis.Core.AnabasisWindow.WaitForShutdownAsync() -> System.Threading.Tasks.Task!
Anabasis.Core.Buffers.BufferExtensions
Anabasis.Core.Buffers.BufferSliceMapping<T>
Anabasis.Core.Buffers.BufferSliceMapping<T>.BufferSliceMapping(Anabasis.Core.Handles.BufferHandle buffer, Silk.NET.OpenGL.GL! gl, int offset, int length, Silk.NET.OpenGL.MapBufferAccessMask mask) -> void
Anabasis.Core.Buffers.BufferSliceMapping<T>.Pointer.get -> T*
Anabasis.Core.Buffers.BufferSliceMapping<T>.Pointer.set -> void
Anabasis.Core.Buffers.GraphicsBuffer
Anabasis.Core.Buffers.GraphicsBuffer.AllocateBuffer(int bytes) -> void
Anabasis.Core.Buffers.GraphicsBuffer.AllocateBuffer<T>(int count = -1, System.ReadOnlySpan<T> initialData = default(System.ReadOnlySpan<T>), Silk.NET.OpenGL.BufferStorageMask mask = (Silk.NET.OpenGL.BufferStorageMask)192) -> void
Anabasis.Core.Buffers.GraphicsBuffer.GraphicsBuffer(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Buffers.GraphicsBuffer.Length.get -> int
Anabasis.Core.Buffers.GraphicsBuffer.Length.set -> void
Anabasis.Core.Buffers.GraphicsBuffer.MapSlice<T>(int offset, int length, Silk.NET.OpenGL.MapBufferAccessMask flags = (Silk.NET.OpenGL.MapBufferAccessMask)194) -> System.Buffers.IMemoryOwner<T>!
Anabasis.Core.Buffers.GraphicsBuffer.Slice<T>(int offset, int length) -> Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>
Anabasis.Core.Buffers.GraphicsBuffer.Typed<T>() -> Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>
Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>
Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>.Slice(int offset = 0, int length = -1) -> Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>
Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>.TypedBufferSlice() -> void
Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>.Write(System.ReadOnlySpan<T> span) -> void
Anabasis.Core.Buffers.GraphicsBuffer.Use(Silk.NET.OpenGL.BufferTargetARB target) -> System.IDisposable!
Anabasis.Core.GenericDisposer
Anabasis.Core.GenericDisposer.Dispose() -> void
Anabasis.Core.GenericDisposer.GenericDisposer(System.Action! disposeAction) -> void
Anabasis.Core.GlException
Anabasis.Core.GlException.ErrorCode.get -> Silk.NET.OpenGL.ErrorCode
Anabasis.Core.GlException.Function.get -> string!
Anabasis.Core.GlException.GlException(Silk.NET.OpenGL.ErrorCode errorCode, string! function, string! message) -> void
Anabasis.Core.GlException.GlException(Silk.NET.OpenGL.ErrorCode errorCode, string! function, string! message, System.Exception! innerException) -> void
Anabasis.Core.GlException.GlException(string? message) -> void
Anabasis.Core.GlException.GlException(string? message, System.Exception? innerException) -> void
Anabasis.Core.GlExtensions
Anabasis.Core.Handles.BufferHandle
Anabasis.Core.Handles.BufferHandle.BufferHandle() -> void
Anabasis.Core.Handles.BufferHandle.BufferHandle(uint Value) -> void
Anabasis.Core.Handles.BufferHandle.Free(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.BufferHandle.Value.get -> uint
Anabasis.Core.Handles.BufferHandle.Value.init -> void
Anabasis.Core.Handles.PipelineHandle
Anabasis.Core.Handles.PipelineHandle.Free(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.PipelineHandle.PipelineHandle() -> void
Anabasis.Core.Handles.PipelineHandle.PipelineHandle(uint Value) -> void
Anabasis.Core.Handles.PipelineHandle.Use(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.PipelineHandle.Value.get -> uint
Anabasis.Core.Handles.PipelineHandle.Value.set -> void
Anabasis.Core.Handles.ProgramHandle
Anabasis.Core.Handles.ProgramHandle.Free(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.ProgramHandle.ProgramHandle() -> void
Anabasis.Core.Handles.ProgramHandle.ProgramHandle(uint Value) -> void
Anabasis.Core.Handles.ProgramHandle.Use(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.ProgramHandle.Value.get -> uint
Anabasis.Core.Handles.ProgramHandle.Value.init -> void
Anabasis.Core.Handles.ShaderHandle
Anabasis.Core.Handles.ShaderHandle.Free(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.ShaderHandle.ShaderHandle() -> void
Anabasis.Core.Handles.ShaderHandle.ShaderHandle(uint Value) -> void
Anabasis.Core.Handles.ShaderHandle.Value.get -> uint
Anabasis.Core.Handles.ShaderHandle.Value.set -> void
Anabasis.Core.Handles.TextureHandle
Anabasis.Core.Handles.TextureHandle.Free(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.TextureHandle.TextureHandle() -> void
Anabasis.Core.Handles.TextureHandle.TextureHandle(uint Value) -> void
Anabasis.Core.Handles.TextureHandle.Value.get -> uint
Anabasis.Core.Handles.TextureHandle.Value.init -> void
Anabasis.Core.Handles.VertexArrayHandle
Anabasis.Core.Handles.VertexArrayHandle.Free(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.VertexArrayHandle.Use(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Handles.VertexArrayHandle.Value.get -> uint
Anabasis.Core.Handles.VertexArrayHandle.Value.init -> void
Anabasis.Core.Handles.VertexArrayHandle.VertexArrayHandle() -> void
Anabasis.Core.Handles.VertexArrayHandle.VertexArrayHandle(uint Value) -> void
Anabasis.Core.IAnabasisBindableHandle
Anabasis.Core.IAnabasisBindableObject
Anabasis.Core.IAnabasisBindableObject.Use() -> System.IDisposable!
Anabasis.Core.IAnabasisContext
Anabasis.Core.IAnabasisContext.Load() -> Anabasis.Tasks.AnabasisTask
Anabasis.Core.IAnabasisContext.Render() -> void
Anabasis.Core.IAnabasisContext.Update() -> void
Anabasis.Core.IAnabasisHandle
Anabasis.Core.IAnabasisHandle.Free(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.IAnabasisHandle.ObjectType.get -> Silk.NET.OpenGL.ObjectIdentifier
Anabasis.Core.IAnabasisHandle.Value.get -> uint
Anabasis.Core.IAnabasisNativeObject
Anabasis.Core.IAnabasisNativeObject.Handle.get -> Anabasis.Core.IAnabasisHandle!
Anabasis.Core.IAnabasisNativeObject.Label.get -> string!
Anabasis.Core.IAnabasisNativeObject.Label.set -> void
Anabasis.Core.IAnabasisNativeObject<TName>
Anabasis.Core.IAnabasisNativeObject<TName>.Handle.get -> TName
Anabasis.Core.IBindable
Anabasis.Core.IBindable.Use(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.MiscMath
Anabasis.Core.MiscMath.MiscMath() -> void
Anabasis.Core.Rendering.IVertexType
Anabasis.Core.Rendering.IVertexType.EstablishVertexFormat(Anabasis.Core.Rendering.VertexArrayBindingIndex bindingIndex, Anabasis.Core.Rendering.VertexFormatter! gl, Anabasis.Core.Handles.VertexArrayHandle vertexArray) -> void
Anabasis.Core.Rendering.RenderBatch
Anabasis.Core.Rendering.RenderBatch.Dispose() -> void
Anabasis.Core.Rendering.RenderBatch.DrawArrays(Silk.NET.OpenGL.PrimitiveType primitiveType, int first, uint count) -> void
Anabasis.Core.Rendering.RenderBatch.DrawElements(Silk.NET.OpenGL.PrimitiveType primitiveType, uint count, Silk.NET.OpenGL.DrawElementsType indexType, uint indexOffset) -> void
Anabasis.Core.Rendering.RenderBatch.DrawElements(Silk.NET.OpenGL.PrimitiveType primitiveType, uint count, System.ReadOnlySpan<byte> indices) -> void
Anabasis.Core.Rendering.RenderBatch.DrawElements(Silk.NET.OpenGL.PrimitiveType primitiveType, uint count, System.ReadOnlySpan<uint> indices) -> void
Anabasis.Core.Rendering.RenderBatch.DrawElements(Silk.NET.OpenGL.PrimitiveType primitiveType, uint count, System.ReadOnlySpan<ushort> indices) -> void
Anabasis.Core.Rendering.RenderBatch.DrawElements(Silk.NET.OpenGL.PrimitiveType primitiveType, uint count, uint indexOffset) -> void
Anabasis.Core.Rendering.VertexArray
Anabasis.Core.Rendering.VertexArray.BindIndexBuffer(Anabasis.Core.Buffers.GraphicsBuffer! buffer) -> void
Anabasis.Core.Rendering.VertexArray.BindVertexBuffer(Anabasis.Core.Buffers.GraphicsBuffer! buffer, Anabasis.Core.Rendering.VertexArrayBindingIndex bindingIndex, int offset, uint stride) -> void
Anabasis.Core.Rendering.VertexArray.VertexArray(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Rendering.VertexArrayBindingIndex
Anabasis.Core.Rendering.VertexArrayBindingIndex.Value.get -> uint
Anabasis.Core.Rendering.VertexArrayBindingIndex.Value.init -> void
Anabasis.Core.Rendering.VertexArrayBindingIndex.VertexArrayBindingIndex() -> void
Anabasis.Core.Rendering.VertexArrayBindingIndex.VertexArrayBindingIndex(uint Value) -> void
Anabasis.Core.Rendering.VertexArrayExtensions
Anabasis.Core.Rendering.VertexAttributeAttribute
Anabasis.Core.Rendering.VertexAttributeAttribute.AttributeType.get -> Silk.NET.OpenGL.AttributeType
Anabasis.Core.Rendering.VertexAttributeAttribute.Layout.get -> int
Anabasis.Core.Rendering.VertexAttributeAttribute.Name.get -> string!
Anabasis.Core.Rendering.VertexAttributeAttribute.Normalize.get -> bool
Anabasis.Core.Rendering.VertexAttributeAttribute.VertexAttributeAttribute(string! name, Silk.NET.OpenGL.AttributeType attributeType, int layout, bool normalize = false) -> void
Anabasis.Core.Rendering.VertexFormat
Anabasis.Core.Rendering.VertexFormatter
Anabasis.Core.Rendering.VertexFormatter.VertexFormatter(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Rendering.VertexFormatter.WriteVertexArrayAttribFormat(Anabasis.Core.Handles.ProgramHandle program, Anabasis.Core.Handles.VertexArrayHandle vertexArray, Anabasis.Core.Rendering.VertexArrayBindingIndex bindingIndex, string! attribName, ref int? attribIndex, int size, Silk.NET.OpenGL.VertexAttribType type, bool normalize, int relativeOffset) -> void
Anabasis.Core.Rendering.VertexFormatter.WriteVertexArrayAttribFormat(Anabasis.Core.Handles.VertexArrayHandle handle, Anabasis.Core.Rendering.VertexArrayBindingIndex index, int attribIndex, int size, Silk.NET.OpenGL.VertexAttribType type, bool normalize, int relativeOffset) -> void
Anabasis.Core.Rendering.VertexFormatter.WriteVertexArrayBindingDivisor(Anabasis.Core.Handles.VertexArrayHandle handle, Anabasis.Core.Rendering.VertexArrayBindingIndex index, uint divisor) -> void
Anabasis.Core.Rendering.VertexTypeAttribute
Anabasis.Core.Rendering.VertexTypeAttribute.Divisor.get -> int
Anabasis.Core.Rendering.VertexTypeAttribute.VertexTypeAttribute(int divisor = 0) -> void
Anabasis.Core.Shader.ProgramUniform<T>
Anabasis.Core.Shader.ProgramUniform<T>.Name.get -> string!
Anabasis.Core.Shader.ProgramUniform<T>.Program.get -> Anabasis.Core.Handles.ProgramHandle
Anabasis.Core.Shader.ProgramUniform<T>.ProgramUniform(Silk.NET.OpenGL.GL! gl, string! name, Anabasis.Core.Handles.ProgramHandle program) -> void
Anabasis.Core.Shader.ProgramUniform<T>.Value.get -> T
Anabasis.Core.Shader.ProgramUniform<T>.Value.set -> void
Anabasis.Core.Shaders.IShaderPackage
Anabasis.Core.Shaders.ShaderPipeline
Anabasis.Core.Shaders.ShaderPipeline.AttachProgram(Silk.NET.OpenGL.UseProgramStageMask stages, Anabasis.Core.Shaders.ShaderProgram! program) -> void
Anabasis.Core.Shaders.ShaderPipeline.ShaderPipeline(Silk.NET.OpenGL.GL! gl) -> void
Anabasis.Core.Shaders.ShaderProgram
Anabasis.Core.Shaders.ShaderProgram.Builder
Anabasis.Core.Shaders.ShaderProgram.Builder.CompileAsync(Silk.NET.OpenGL.ShaderType shaderType, params string![]! source) -> Anabasis.Tasks.AnabasisTask
Anabasis.Core.Shaders.ShaderProgram.Builder.LinkAsync() -> Anabasis.Tasks.AnabasisTask<Anabasis.Core.Shaders.ShaderProgram!>
Anabasis.Core.Shaders.ShaderProgram.SetUniform1(string! name, ref int? location, float value) -> void
Anabasis.Core.Shaders.ShaderProgram.SetUniform1(string! name, ref int? location, int value) -> void
Anabasis.Core.Shaders.ShaderProgram.SetUniformMatrix4(string! name, ref int? location, bool transpose, System.Numerics.Matrix4x4 matrix) -> void
Anabasis.Core.Textures.Texture
Anabasis.Core.Textures.Texture.BindTo(uint unit) -> System.IDisposable!
Anabasis.Core.Textures.Texture.Format.get -> Silk.NET.OpenGL.SizedInternalFormat
Anabasis.Core.Textures.Texture.Mipmaps.get -> uint
Anabasis.Core.Textures.Texture.Target.get -> Silk.NET.OpenGL.TextureTarget
Anabasis.Core.Textures.Texture.Target.init -> void
Anabasis.Core.Textures.Texture.Texture(Silk.NET.OpenGL.GL! gl, Anabasis.Core.Handles.TextureHandle name, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format = Silk.NET.OpenGL.SizedInternalFormat.Rgba8) -> void
Anabasis.Core.Textures.Texture.Texture(Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.TextureTarget target, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format = Silk.NET.OpenGL.SizedInternalFormat.Rgba8) -> void
Anabasis.Core.Textures.Texture2D
Anabasis.Core.Textures.Texture2D.Height.get -> uint
Anabasis.Core.Textures.Texture2D.Texture2D(Silk.NET.OpenGL.GL! gl, Anabasis.Core.Handles.TextureHandle name, uint width, uint height, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format) -> void
Anabasis.Core.Textures.Texture2D.Texture2D(Silk.NET.OpenGL.GL! gl, uint width, uint height, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format) -> void
Anabasis.Core.Textures.Texture2D.UploadPixels<TPixel>(int mipmapLevel, Silk.NET.Maths.Box2D<int> rect, Silk.NET.OpenGL.PixelFormat pixelFormat, Silk.NET.OpenGL.PixelType pixelType, System.ReadOnlySpan<TPixel> pixels) -> void
Anabasis.Core.Textures.Texture2D.Width.get -> uint
Anabasis.Core.Textures.Texture2DArray
Anabasis.Core.Textures.Texture2DArray.CreateView(uint minlevel, uint numlevels, uint minlayer, uint numlayers) -> Anabasis.Core.Textures.Texture!
Anabasis.Core.Textures.Texture2DArray.Texture2DArray(Silk.NET.OpenGL.GL! gl, Anabasis.Core.Handles.TextureHandle name, uint width, uint height, uint depth, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format = Silk.NET.OpenGL.SizedInternalFormat.Rgba8) -> void
Anabasis.Core.Textures.Texture2DArray.Texture2DArray(Silk.NET.OpenGL.GL! gl, uint width, uint height, uint depth, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format = Silk.NET.OpenGL.SizedInternalFormat.Rgba8) -> void
Anabasis.Core.Textures.Texture2DArray.UploadPixels<TPixel>(int mipmapLevel, Silk.NET.Maths.Box2D<int> rect, int layer, Silk.NET.OpenGL.PixelFormat pixelFormat, Silk.NET.OpenGL.PixelType pixelType, System.ReadOnlySpan<TPixel> pixels) -> void
Anabasis.Core.Textures.Texture3D
Anabasis.Core.Textures.Texture3D.Height.get -> uint
Anabasis.Core.Textures.Texture3D.Texture3D(Silk.NET.OpenGL.GL! gl, Anabasis.Core.Handles.TextureHandle name, uint width, uint height, uint depth, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format = Silk.NET.OpenGL.SizedInternalFormat.Rgba8) -> void
Anabasis.Core.Textures.Texture3D.Texture3D(Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.TextureTarget target, uint width, uint height, uint depth, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format) -> void
Anabasis.Core.Textures.Texture3D.Texture3D(Silk.NET.OpenGL.GL! gl, uint width, uint height, uint depth, uint mipmaps, Silk.NET.OpenGL.SizedInternalFormat format = Silk.NET.OpenGL.SizedInternalFormat.Rgba8) -> void
Anabasis.Core.Textures.Texture3D.UploadPixels<TPixel>(int mipmapLevel, Silk.NET.Maths.Box3D<int> rect, Silk.NET.OpenGL.PixelFormat pixelFormat, Silk.NET.OpenGL.PixelType pixelType, System.ReadOnlySpan<TPixel> pixels) -> void
Anabasis.Core.Textures.Texture3D.Width.get -> uint
Microsoft.CodeAnalysis.PooledObjects.StatelessReadOnlySpanAction<T>
Microsoft.CodeAnalysis.PooledObjects.StatelessSpanAction<T>
override Anabasis.Core.Buffers.BufferSliceMapping<T>.GetSpan() -> System.Span<T>
override Anabasis.Core.Buffers.BufferSliceMapping<T>.Pin(int elementIndex = 0) -> System.Buffers.MemoryHandle
override Anabasis.Core.Buffers.BufferSliceMapping<T>.Unpin() -> void
override Anabasis.Core.GlException.Message.get -> string!
readonly Anabasis.Core.Buffers.BufferSliceMapping<T>.Length -> int
readonly Anabasis.Core.Buffers.BufferSliceMapping<T>.Offset -> int
readonly Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>.Buffer -> Anabasis.Core.Buffers.GraphicsBuffer!
readonly Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>.Length -> int
readonly Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>.Offset -> int
readonly Anabasis.Core.Shader.ProgramUniform<T>.Gl -> Silk.NET.OpenGL.GL!
static Anabasis.Core.Buffers.BufferExtensions.CopyTo<T>(this System.ReadOnlySpan<T> span, Anabasis.Core.Buffers.GraphicsBuffer! buffer) -> void
static Anabasis.Core.Buffers.BufferExtensions.CopyTo<T>(this System.ReadOnlySpan<T> span, Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T> slice) -> void
static Anabasis.Core.Buffers.BufferExtensions.LoadData<T, TArg>(this Anabasis.Core.Buffers.GraphicsBuffer! buffer, System.Buffers.SpanAction<T, TArg>! action, TArg arg, int offset, int length, Silk.NET.OpenGL.MapBufferAccessMask mask = (Silk.NET.OpenGL.MapBufferAccessMask)194) -> void
static Anabasis.Core.Buffers.BufferExtensions.LoadData<T>(this Anabasis.Core.Buffers.GraphicsBuffer! buffer, Microsoft.CodeAnalysis.PooledObjects.StatelessSpanAction<T>! action, int offset, int length, Silk.NET.OpenGL.MapBufferAccessMask mask = (Silk.NET.OpenGL.MapBufferAccessMask)194) -> void
static Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>.implicit operator Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>(Anabasis.Core.Buffers.GraphicsBuffer! buffer) -> Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T>
static Anabasis.Core.GlExtensions.CreateTexture(this Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.TextureTarget target) -> uint
static Anabasis.Core.GlExtensions.DrawElements(this Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.PrimitiveType primitiveType, uint count, Silk.NET.OpenGL.DrawElementsType indexType, nuint indexOffset) -> void
static Anabasis.Core.GlExtensions.DrawElementsBaseVertex(this Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.PrimitiveType primitiveType, uint count, Silk.NET.OpenGL.DrawElementsType indexType, nuint indexOffset, int baseVertex) -> void
static Anabasis.Core.GlExtensions.DrawElementsInstanced(this Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.PrimitiveType primitiveType, uint countPerInstance, Silk.NET.OpenGL.DrawElementsType indexType, nuint indexOffset, uint instanceCount) -> void
static Anabasis.Core.GlExtensions.GetObjectLabel(this Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.ObjectIdentifier identifier, uint name) -> string!
static Anabasis.Core.GlExtensions.ObjectLabel(this Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.ObjectIdentifier identifier, uint name, string! label) -> void
static Anabasis.Core.GlExtensions.ThrowIfError(this Silk.NET.OpenGL.GL! gl, string! function) -> void
static Anabasis.Core.Handles.BufferHandle.ObjectType.get -> Silk.NET.OpenGL.ObjectIdentifier
static Anabasis.Core.Handles.PipelineHandle.ObjectType.get -> Silk.NET.OpenGL.ObjectIdentifier
static Anabasis.Core.Handles.ProgramHandle.ObjectType.get -> Silk.NET.OpenGL.ObjectIdentifier
static Anabasis.Core.Handles.ShaderHandle.ObjectType.get -> Silk.NET.OpenGL.ObjectIdentifier
static Anabasis.Core.Handles.TextureHandle.ObjectType.get -> Silk.NET.OpenGL.ObjectIdentifier
static Anabasis.Core.Handles.VertexArrayHandle.ObjectType.get -> Silk.NET.OpenGL.ObjectIdentifier
static Anabasis.Core.MiscMath.Align(int value, int alignment) -> int
static Anabasis.Core.MiscMath.Align(uint value, uint alignment) -> uint
static Anabasis.Core.Rendering.RenderBatch.Begin(Silk.NET.OpenGL.GL! gl, Anabasis.Core.Shaders.IShaderPackage! shaderPackage, Anabasis.Core.Rendering.VertexArray! array) -> Anabasis.Core.Rendering.RenderBatch!
static Anabasis.Core.Rendering.VertexArrayBindingIndex.NextIndex.get -> Anabasis.Core.Rendering.VertexArrayBindingIndex
static Anabasis.Core.Rendering.VertexArrayExtensions.FormatAndBindVertexBuffer(this Anabasis.Core.Rendering.VertexArray! vertexArray, Anabasis.Core.Buffers.GraphicsBuffer! buffer, Anabasis.Core.Rendering.VertexFormat! vertexFormat, int offset, uint stride) -> Anabasis.Core.Rendering.VertexArrayBindingIndex
static Anabasis.Core.Rendering.VertexArrayExtensions.FormatAndBindVertexBuffer<T>(this Anabasis.Core.Rendering.VertexArray! array, Anabasis.Core.Buffers.GraphicsBuffer! buffer) -> Anabasis.Core.Rendering.VertexArrayBindingIndex
static Anabasis.Core.Rendering.VertexArrayExtensions.FormatAndBindVertexBuffer<T>(this Anabasis.Core.Rendering.VertexArray! vertexArray, Anabasis.Core.Buffers.GraphicsBuffer.TypedBufferSlice<T> slice) -> Anabasis.Core.Rendering.VertexArrayBindingIndex
static Anabasis.Core.Shaders.ShaderProgram.CreateBuilder(Silk.NET.OpenGL.GL! gl) -> Anabasis.Core.Shaders.ShaderProgram.Builder!
static Anabasis.Core.Shaders.ShaderProgram.CreateSeparableShaderProgram(Silk.NET.OpenGL.GL! gl, Silk.NET.OpenGL.ShaderType shaderType, params string![]! source) -> Anabasis.Tasks.AnabasisTask<Anabasis.Core.Shaders.ShaderProgram!>
static Anabasis.Core.Textures.Texture.CopyPixels(Anabasis.Core.Textures.Texture! src, Anabasis.Core.Textures.Texture! dst, Silk.NET.Maths.Box3D<int> srcRect, int srcLevel, Silk.NET.Maths.Vector3D<int> dstOffset, int dstLevel) -> void
virtual Anabasis.Core.AnabasisNativeObject<THandle>.Dispose(bool disposing) -> void